from utils import addCustomEventListener
from settings import WhisperType
from roll_renderer import Beyond20RollRenderer, Beyond20BaseRoll

settings = None
extension_url = "/modules/beyond20/"

class FVTTDisplayer:
    def postHTML(self, request, title, html, buttons, character, whisper, play_sound):
        Hooks.once('renderChatMessage', def(chat_message, data, html):
                    nonlocal extension_url

                    if data.find ? and not html.find ?:
                        temp = html
                        html = data
                        data = temp

                    icon16 = extension_url + "images/icons/icon16.png"
                    html.find(".ct-beyond20-custom-icon").attr('src', icon16)
                    html.find(".ct-beyond20-custom-roll").on('click', def(event):
                        nonlocal roll_renderer
                        roll = $(event.currentTarget).find(".beyond20-roll-formula").text()
                        roll_renderer.rollDice(request, title, roll)
                    )
                    html.find(".beyond20-chat-button").on('click', def(event):
                        button = $(event.currentTarget).text()
                        buttons[button]()
                    )
                )
        return self._postChatMessage(html, character, whisper, play_sound)

    def _postChatMessage(self, message, character, whisper, play_sound=False):
        nonlocal CHAT_MESSAGE_TYPES, CONST
        if CONST.CHAT_MESSAGE_TYPES?:
            MESSAGE_TYPES = {"OOC": CONST.CHAT_MESSAGE_TYPES.OOC, "WHISPER": CONST.CHAT_MESSAGE_TYPES.WHISPER}
        elif CHAT_MESSAGE_TYPES?:
            MESSAGE_TYPES = {"OOC": CHAT_MESSAGE_TYPES.OOC, "WHISPER": CHAT_MESSAGE_TYPES.WHISPER}
        else:
            # Prior to 0.3.6, CHAT_MESSAGE_TYPES wasn't defined
            MESSAGE_TYPES = {"OOC": 1, "WHISPER": 4}
        data = {"content": message, 
                "user": game.user._id,
                "speaker": self._getSpeakerByName(character)}
        rollMode = self._whisperToRollMode(whisper)
        if rollMode in ["gmroll", "blindroll"]:
            data['type'] = MESSAGE_TYPES.WHISPER
            data["whisper"] = ChatMessage.getWhisperIDs("GM")
            if rollMode == "blindroll":
                data["blind"] = True
        else:
            data['type'] = MESSAGE_TYPES.OOC
        if play_sound:
            data["sound"] = CONFIG.sounds.dice
        return ChatMessage.create(data)

    def _getSpeakerByName(self, name):
        if name is None:
            return ChatMessage.getSpeaker()
        low_name = name.toLowerCase()
        actor = game.actors.entities.find(def(actor): return actor.data.name.toLowerCase() == low_name;)
        speaker = ChatMessage.getSpeaker({"actor": actor})
        speaker["alias"] = name
        return speaker

    def _whisperToRollMode(self, whisper):
        try:
            return {WhisperType.NO: "roll",
                    WhisperType.YES: "gmroll",
                    WhisperType.QUERY: game.settings.get("core", "rollMode")
                    }[whisper]
        except:
            return game.settings.get("core", "rollMode")

    def displayError(self, message):
        ui.notifications.error(message)

class FVTTRoll(Beyond20BaseRoll):
    def __init__(self, formula, data={}):
        formula = formula.replace("ro<2", "r<=2")
        Beyond20BaseRoll.__init__(self, formula, data)
        self._roll = new Roll(formula, data).roll()

    @property
    def total(self):
        return self._roll.total
    @property
    def formula(self):
        return self._roll.formula
    @property
    def dice(self):
        return self._roll.dice
    @property
    def parts(self):
        return self._roll.parts

    def getTooltip(self):
        return self._roll.getTooltip()

    def reroll(self):
        self._roll = self._roll.reroll()
        return self

class FVTTRoller:
    def roll(self, formula, data):
        return FVTTRoll(formula, data)


class FVTTPrompter:
    def prompt(self, title, html, ok_label="OK", cancel_label="Cancel"):
        return new Promise(def(resolve, reject):
            nonlocal extension_url
            icon = '<img style="border: 0px;" src="' + extension_url + "images/icons/icon16.png" + '"></img>'
            ok_pressed = False
            new Dialog({"title": title,
                        "content": html,
                        "buttons": {"ok": {"label": ok_label,
                                            "icon": icon,
                                            "callback": def():
                                                nonlocal ok_pressed
                                                ok_pressed = True
                                            
                                        },
                                    "cancel": {"label": cancel_label}
                                    },
                        "default": "ok",
                        "close": def(html):
                            resolve(html if ok_pressed else None)
                        }).render(True)
        )

roll_renderer = Beyond20RollRenderer(FVTTRoller(), FVTTPrompter(), FVTTDisplayer())
roll_renderer.setBaseURL(extension_url)
roll_renderer.setSettings(settings)

def rollInitiative(request, custom_roll_dice=""):
    nonlocal settings, roll_renderer

    roll_renderer.handleRollRequest(request).then(def(roll):
        if settings["initiative-tracker"]:
            addInitiativeToCombat(roll)
    )

def popAvatar(request):
    # Check for the beyond20 module, if it's there, we can pop the image.
    module = game.modules.get("beyond20")
    if module ? and isNewerVersion(module.data.version, "0.6"):
        new ImagePopout(request.character.avatar, 
                         {"shareable":False, 
                            "title": request.character.name,
                            "entity": {"type": "User", "id": game.user.id}
                         }).render(True).shareImage(True)

v'async'
def addInitiativeToCombat(roll):
    if canvas.tokens.controlledTokens.length > 0:
        if game.combat?:
            if game.combat.scene.id != canvas.scene.id:
                ui.notifications.warn("Cannot add initiative to tracker: Encounter was not created for this scene")
            else:
                for token in canvas.tokens.controlledTokens:
                    combatant = game.combat.getCombatantByToken(token.id)
                    if combatant:
                        idField = "_id" if combatant._id else "id"
                        promise = game.combat.updateCombatant({idField: combatant[idField], "initiative": roll.total})
                    else:
                        promise = game.combat.createCombatant({"tokenId": token.id, "hidden": token.data.hidden, "initiative": roll.total})
                    # to avoid a 'defined but not used' 
                    promise
                    v'await promise'
        else:
            ui.notifications.warn("Cannot add initiative to tracker: no Encounter has been created yet")
    else:
            ui.notifications.warn("Cannot add initiative to tracker: no token is currently selected")



def handleRoll(request):
    nonlocal roll_renderer

    console.log("Received roll request ", request)

    if request.type == "initiative":
        rollInitiative(request)
    if request.type == "avatar":
        popAvatar(request)
    else:
        roll_renderer.handleRollRequest(request)

def updateHP(name, current, total, temp):
    console.log("Updating HP for " + name + " : (" + current + "+" + temp + ")/" + total)
    name = name.toLowerCase().trim()

    tokens = canvas.tokens.objects.children.filter(def(t): return t.name.toLowerCase().trim() == name;)

    dnd5e_data = {"data.attributes.hp.value": current, "data.attributes.hp.temp": temp, "data.attributes.hp.max": total}
    sws_data = {"data.health.value": current + temp, "data.health.max": total}
    if len(tokens) == 0:
        actor = game.actors.entities.find(def(a): return a.owner and a.name.toLowerCase() == name;)
        if actor?.data?.data?.attributes?.hp?:
            actor.update(dnd5e_data)
        elif actor?.data?.data?.health?:
            actor.update(sws_data)

    for token in tokens:
        if token.actor?.data?.data?.attributes?.hp?::
            token.actor.update(dnd5e_data)
        elif token.actor?.data?.data?.health?:
            actor.update(sws_data)

                                         
def updateConditions(request, name, conditions, exhaustion):
    nonlocal roll_renderer, CONST, CONFIG
    console.log("Updating Conditions for " + name + " : ", conditions, " - exhaustion level : ", exhaustion)
    display_conditions = conditions
    if exhaustion > 0:
        display_conditions = conditions.concat(["Exhausted (Level " + exhaustion + ")"])
    if display_conditions.length == 0:
        message = name + " has no active condition"
    else:
        message = name + " is : " + display_conditions.join(", ")
    MESSAGE_TYPES = CONST.CHAT_MESSAGE_TYPES
    ChatMessage.create({"content": message, 
        "user": game.user._id,
        "speaker": roll_renderer._displayer._getSpeakerByName(name),
        "type": MESSAGE_TYPES.EMOTE
    })

    # Check for the beyond20 module, if it's there, we can use its status effects.
    module = game.modules.get("beyond20")

    if module ? and isNewerVersion(module.data.version, "0.6"):
        # Update status effects
        name = name.toLowerCase()

        tokens = canvas.tokens.objects.children.filter(def(t): return t.data.name.toLowerCase() == name;)

        for token in tokens:
            effects = token.data.effects
            new_effects = []

            new_conditions = conditions.map(def (c): return c.toLowerCase() + ".svg";)
            defeated = False
            if exhaustion > 0:
                if exhaustion == 6:
                    defeated = True
                else:
                    new_conditions.push("exhaustion" + exhaustion + ".svg")

            # Remove status effects that have disappeared
            for effect in effects:
                if not effect.startsWith("modules/beyond20/conditions/"):
                    new_effects.push(effect)
                else:
                    effect_name = effect[34:]
                    if effect_name in new_conditions:
                        new_effects.push(effect)
                        new_conditions = new_conditions.filter(def(c): return c != effect_name;)
            console.log("From ", effects, "to ", new_effects, " still need to add ", new_conditions)
            new_effects = new_effects.concat(new_conditions.map(def(c): return "modules/beyond20/conditions/" + c;))
            data = {"effects": new_effects}
            if defeated:
                data["overlayEffect"] = "icons/svg/skull.svg"
            token.update(data)



def setSettings(new_settings, url):
    nonlocal settings, extension_url, roll_renderer

    settings = new_settings
    extension_url = url
    roll_renderer.setBaseURL(extension_url)
    roll_renderer.setSettings(settings)

def disconnectAllEvents():
    nonlocal registered_events
    
    for event in registered_events:
        document.removeEventListener(*event)

def setTitle():
    if game.world?:
        title = document.getElementsByTagName("title")[0]
        # Make sure the mutation gets triggerred if we reload the extension
        title.textContent = "Foundry Virtual Tabletop"
        title.textContent = game.world.title + " • Foundry Virtual Tabletop"
    else:
        # Wait a second for the world to get loaded
        setTimeout(setTitle, 1000)

console.log("Beyond20: Foundry VTT Page Script loaded")
registered_events = []
registered_events.append(addCustomEventListener("Roll", handleRoll))
registered_events.append(addCustomEventListener("NewSettings", setSettings))
registered_events.append(addCustomEventListener("UpdateHP", updateHP))
registered_events.append(addCustomEventListener("UpdateConditions", updateConditions))
registered_events.append(addCustomEventListener("disconnect", disconnectAllEvents))
setTitle()
alertify = ui.notifications
