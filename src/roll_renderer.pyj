from utils import replaceRolls
from settings import RollType, WhisperType
from dndbeyond_discord import postToDiscord
import math

class DAMAGE_FLAGS:
    MESSAGE = 0
    REGULAR = 1
    VERSATILE = 2
    ADDITIONAL = 4
    HEALING = 8
    CRITICAL = 0x10

class Beyond20RollRenderer:
    def __init__(self, roller, prompter, displayer):
        self._roller = roller
        self._prompter = prompter
        self._displayer = displayer
        self._extension_url = ""
        self._settings = {}

    def setBaseURL(self, base_url):
        self._extension_url = base_url

    def setSettings(self, settings):
        self._settings = settings

    def queryGeneric(self, title, question, choices, select_id="generic-query", order=None):
        html = '<form>' + \
                '<div class="beyond20-form-row">' + \
                    '<label>' + question + '</label>' + \
                    '<select id="' + select_id + '" name="' + select_id + '">'
        if order is None:
            order = choices
        for i, option in enumerate(order):
            selected = " selected" if i == 0 else ""
            value = choices[option]
            if value:
                html += '<option value="' + option + '"' + selected + '>' + value + '</option>'
            else:
                html += '<option value="' + option + '"' + selected + '>' + option + '</option>'
        html += """
                </select>
            </div>
        </div>
        """
        return new Promise(def(resolve, reject):
            self._prompter.prompt(title, html, "Roll").then(def(html):
                if html:
                    resolve(html.find("#" + select_id).val())
            )
        )
        
    def queryAdvantage(self, title):
        choices = {RollType.NORMAL: "Normal Roll",
                   RollType.DOUBLE: "Roll Twice",
                   RollType.ADVANTAGE: "Advantage",
                   RollType.DISADVANTAGE: "Disadvantage",
                   RollType.THRICE: "Roll Thrice",
                   RollType.SUPER_ADVANTAGE: "Super Advantage",
                   RollType.SUPER_DISADVANTAGE: "Super Disadvantage"
                }
        order = [RollType.DOUBLE, RollType.NORMAL, RollType.ADVANTAGE, RollType.DISADVANTAGE, RollType.THRICE, RollType.SUPER_ADVANTAGE, RollType.SUPER_DISADVANTAGE]
        return self.queryGeneric(title, "Select roll mode : ", choices, "roll-mode", order).then(def(val): return int(val);)

    def getToHit(self, request, title, modifier="", data={}):
        async_function = v'async'
        def ():
            advantage = request.advantage
            if advantage == RollType.QUERY:
                advantage = v'await self.queryAdvantage(title)'
            if advantage == RollType.NORMAL:
                return [self.createRoll("1d20" + modifier, data)]
            elif [RollType.DOUBLE, RollType.ADVANTAGE, RollType.DISADVANTAGE].includes(advantage):
                roll_1 = self.createRoll("1d20" + modifier, data)
                roll_2 = self.createRoll("1d20" + modifier, data)

                if advantage == RollType.ADVANTAGE:
                    if roll_1.total >= roll_2.total:
                        roll_2.setDiscarded(True)
                    else:
                        roll_1.setDiscarded(True)
                elif advantage == RollType.DISADVANTAGE:
                    if roll_1.total <= roll_2.total:
                        roll_2.setDiscarded(True)
                    else:
                        roll_1.setDiscarded(True)
                return [roll_1, roll_2]
            elif [RollType.THRICE, RollType.SUPER_ADVANTAGE, RollType.SUPER_DISADVANTAGE].includes(advantage):
                roll_1 = self.createRoll("1d20" + modifier, data)
                roll_2 = self.createRoll("1d20" + modifier, data)
                roll_3 = self.createRoll("1d20" + modifier, data)

                if advantage == RollType.SUPER_ADVANTAGE:
                    if roll_1.total >= roll_2.total and roll_1.total >= roll_3.total:
                        roll_2.setDiscarded(True)
                        roll_3.setDiscarded(True)
                    elif roll_2.total >= roll_3.total:
                        roll_1.setDiscarded(True)
                        roll_3.setDiscarded(True)
                    else:
                        roll_1.setDiscarded(True)
                        roll_2.setDiscarded(True)
                elif advantage == RollType.SUPER_DISADVANTAGE:
                    if roll_1.total <= roll_2.total and roll_1.total <= roll_3.total:
                        roll_2.setDiscarded(True)
                        roll_3.setDiscarded(True)
                    elif roll_2.total <= roll_3.total:
                        roll_1.setDiscarded(True)
                        roll_3.setDiscarded(True)
                    else:
                        roll_1.setDiscarded(True)
                        roll_2.setDiscarded(True)
                return [roll_1, roll_2, roll_3]
        return async_function()

    def isCriticalHitD20(self, rolls, limit=20):
        for roll in rolls:
            roll.setCriticalLimit(limit)
            if not roll.isDiscarded() and roll.isCriticalHit():
                return True
        return False

    def injectRollsInDescription(self, description):
        icon16 = "/modules/beyond20/images/icons/icon16.png"
        replaceCB = def(dice, modifier):
            dice_formula = ("1d20" if dice == "" else dice) + modifier
            # <u> is filtered out in 0.3.2, so using <span> instead
            return '<span class="ct-beyond20-custom-roll"><strong>' + dice + modifier + '</strong>' + \
                '<img class="ct-beyond20-custom-icon" src="' + icon16 + \
                '" style="margin-right: 3px; margin-left: 3px; border: 0px;"></img>' + \
                '<span class="beyond20-roll-formula" style="display: none;">' + dice_formula + '</span></span>'
        return replaceRolls(description, replaceCB)

    def rollToDetails(self, roll, is_total=False):
        async_function = v'async'
        def ():
            hit = roll.isCriticalHit()
            fail = roll.isCriticalFail()
            roll_type_class = 'beyond20-roll-detail-'
            roll_type_class += 'crit-fail' if hit and fail else ('crit' if hit else ('fail' if fail else 'normal'))
            if roll.isDiscarded():
                roll_type_class += ' beyond20-roll-detail-discarded'
            if is_total:
                roll_type_class += ' beyond20-roll-total dice-total'
            total = "<span class='" + roll_type_class + "'>" + roll.total + "</span>"
            tooltip = v'await roll.getTooltip()'
            return "<span class='beyond20-tooltip'>" + total + "<span class='dice-roll beyond20-tooltip-content'>" + \
                "<div class='dice-formula beyond20-roll-formula'>" + roll.formula + "</div>" + tooltip + "</span></span>"
        return async_function()

    def rollsToCells(self, html):
        result = ""
        for roll in html.split(" | "):
            result += '<div class="beyond20-roll-cell">' + roll + '</div>'
        return result


    def postDescription(self, request, title, source, attributes, description, attack_rolls=[], roll_info=[], damage_rolls=[], open=False):
        async_function = v'async'
        def ():
            play_sound = False
            buttons={}
            # these variables get redefined, so they need to be nonlocal to avoid a 'def-after-use' warning from linter
            nonlocal damage_rolls, description, title
            if request.whisper == WhisperType.HIDE_NAMES:
                description = None
                title = "???"
            # Handle the case where you don't want to auto-roll damages
            if len(damage_rolls) > 0 and len(attack_rolls) > 0 and not self._settings["auto-roll-damage"]:
                makeCB = def(request, title, source, attributes, description, damage_rolls):
                    roll_damages_args = {"damages": damage_rolls, "num_rolls": 0}
                    return def():
                        damages = roll_damages_args.damages
                        if roll_damages_args.num_rolls > 0:
                            damages = self.rerollDamages(damages)
                        roll_damages_args.num_rolls += 1
                        self.postDescription(request, title, source, attributes, description, damage_rolls=damages)
                buttons = {"Roll Damages": makeCB(request, title, source, attributes, description, damage_rolls)}
                damage_rolls = []

            html = '<div class="beyond20-message">'
            if description:
                html += "<details" + (" open" if open else "") + "><summary><a>" + title + "</a></summary>"
                if source or attributes.length > 0:
                    html += "<table>"
                    if source:
                        html += "<tr><td colspan'2'><i>" + source + "</i></td></tr>"
                    for attr in attributes:
                        html += "<tr><td><b>" + attr + "</b></td><td>" + attributes[attr] + "</td></tr>"
                    html += "</table>"
                html_description = self.injectRollsInDescription(description).replace(/\n/g, "</br>")
                html += "<div class='beyond20-description'>" + html_description + "</div></details>"
            else:
                html = "<div class='beyond20-title'>" + title + "</div>"

            #console.log("Rolls : ", attack_rolls, roll_info, damage_rolls)

            for (name, value) in roll_info:
                html += "<div class='beyond20-roll-result'><b>" + name + ": </b><span>" + value + "</span></div>"

            if len(attack_rolls) > 0:
                roll_html = ""
                for i, roll in enumerate(attack_rolls):
                    if i > 0:
                        roll_html += " | "
                    roll_html += v'await self.rollToDetails(roll)'
                    play_sound = True
                html += "<div class='beyond20-roll-result beyond20-roll-cells'>" + self.rollsToCells(roll_html) + "</div>"

            add_totals = damage_rolls.filter(def(r): return (r[2] & DAMAGE_FLAGS.CRITICAL) == 0;).length > 1
            total_damages = {}
            for (roll_name, roll, flags) in damage_rolls:
                is_total = not add_totals and (flags & DAMAGE_FLAGS.CRITICAL) == 0
                if isinstance(roll, str):
                    roll_html = "<span>" + roll + "</span>"
                else:
                    roll_html = v'await self.rollToDetails(roll, is_total)'
                play_sound = True
                roll_name = roll_name[0].toUpperCase() + roll_name[1:] + ": "
                html += "<div class='beyond20-roll-result'><b>" + roll_name + "</b>" + roll_html + "</div>"
                if add_totals:
                    kind_of_damage = ""
                    if flags & DAMAGE_FLAGS.REGULAR:
                        kind_of_damage = "Critical Damage" if flags & DAMAGE_FLAGS.CRITICAL else "Damage"
                    elif flags & DAMAGE_FLAGS.VERSATILE:
                        kind_of_damage = "Critical Two-Handed Damage" if flags & DAMAGE_FLAGS.CRITICAL else "Two-Handed Damage"
                    elif flags & DAMAGE_FLAGS.HEALING:
                        kind_of_damage = "Healing"
                    elif flags & DAMAGE_FLAGS.ADDITIONAL:
                        # HACK Alert: crappy code
                        regular = "Critical Damage" if flags & DAMAGE_FLAGS.CRITICAL else "Damage"
                        versatile = "Critical Two-Handed Damage" if flags & DAMAGE_FLAGS.CRITICAL else "Two-Handed Damage"
                        if regular in total_damages:
                            total_damages[regular] += " + " + str(roll.total)
                        if versatile in total_damages:
                            total_damages[versatile] += " + " + str(roll.total)
                        continue
                    else:
                        continue
                    if kind_of_damage in total_damages:
                        total_damages[kind_of_damage] += " + " + str(roll.total)
                    else:
                        total_damages[kind_of_damage] = str(roll.total)

            if len(total_damages) > 0:
                html += "<div class='beyond20-roll-result'><b><hr/></b></div>"
            roll = None
            for key in total_damages:
                is_total = roll is None
                # to satisfy lint
                is_total
                roll = self._roller.roll(total_damages[key])
                total_damages[key] = roll
                roll_html = v'await self.rollToDetails(roll, is_total)'
                html += "<div class='beyond20-roll-result'><b>Total " + key + ": </b>" + roll_html + "</div>"

            for button in buttons:
                html += '<button class="beyond20-chat-button">' + button + '</button>'
            html += "</div>"
            character = request.character.name
            if request.whisper == WhisperType.HIDE_NAMES:
                character = "???"

            postToDiscord(self._settings["discord-secret"], request, title, source, attributes, description, attack_rolls, roll_info, damage_rolls, total_damages, open).then(def (error):
                if error?:
                    self._displayer.displayError("Beyond20 Discord Integration: " + error)
            )
            self._displayer.postHTML(request, title, html, buttons, character, request.whisper, play_sound)
            if attack_rolls.length > 0:
                return attack_rolls.find(def (r): return not r.isDiscarded();)
            elif total_damages.length > 0:
                return total_damages[0]
            elif damage_rolls.length > 0:
                return damage_rolls[0]
            else:
                return None
        return async_function()

    def createRoll(self, dice, data):
        new_data = {}
        parts = [dice]
        for key in data:
            if data[key] != "":
                new_key = key.replace("_", "").toLowerCase()
                new_data[new_key] = data[key]
                parts.append(new_key)
        return self._roller.roll(parts.join(" + @"), new_data)

    def rollDice(self, request, title, dice, data={}):
        roll = self.createRoll(dice, data)
        return self.postDescription(request, title, None, {}, None, attack_rolls=[roll])

    def rollD20(self, request, title, data):
        return self.getToHit(request, title, "", data).then(def (attack_rolls):
            return self.postDescription(request, title, None, {}, None, attack_rolls=attack_rolls)
        )
        
    def rollSkill(self, request, custom_roll_dice=""):
        data = {request.ability: request.modifier, "custom_dice": custom_roll_dice}

        # Custom skill
        if request.ability == "--" and request.character.abilities.length > 0:
            prof = ""
            prof_val = ""
            if request.proficiency == "Proficiency":
                prof = "proficiency"
                prof_val = request.character.proficiency
            elif request.proficiency == "Half Proficiency":
                prof = "half_proficiency"
                prof_val += math.floor(request.character.proficiency / 2)
            elif request.proficiency == "Expertise":
                prof = "expertise"
                prof_val += request.character.proficiency * 2
            formula = "1d20 + @ability " + ((" + @" + prof) if prof != "" else prof) + " + @custom_dice"
            html = '<form>'
            html += '<div class="beyond20-form-row"><label>Roll Formula</label><input type="text" value="' + formula + '" disabled></div>'
            html += '<div class="beyond20-form-row"><label>Select Ability</label><select name="ability">'
            modifiers = {}
            for ability in request.character.abilities:
                html += '<option value="' + ability[0] + '">' + ability[0] + '</option>'
                modifiers[ability[0]] = ability[3]
            html += "</select></div>"
            html += '</form>'
            self._prompter.prompt("Custom Skill", html, request.skill).then(def(html):
                if html:
                    ability = html.find('[name="ability"]').val()
                    mod = modifiers[ability]
                    if request.modifier != "--" and request.modifier != "+0":
                        mod += request.modifier
                    data = {"ability": mod, "prof": prof_val, "custom_dice": custom_roll_dice}
                    self.rollD20(request, request.skill + "(" + ability + ")", data)
            )
        else:
            return self.rollD20(request, request.skill + "(" + request.modifier + ")", data)

    def rollAbility(self, request, custom_roll_dice=""): 
        data = {request.ability: request.modifier, "custom_dice": custom_roll_dice}
        return self.rollD20(request, request.name + "(" + request.modifier + ")", data)

    def rollSavingThrow(self, request, custom_roll_dice=""):
        data = {request.ability: request.modifier, "custom_dice": custom_roll_dice}
        return self.rollD20(request, request.name + " Save" + "(" + request.modifier + ")", data)

    def rollInitiative(self, request, callback, custom_roll_dice=""):
        data = {"initiative": request.initiative, "custom_dice": custom_roll_dice}
        return self.rollD20(request, "Initiative" + "(" + request.initiative + ")", data)

    def rollHitDice(self, request):
        rname = "Hit Dice" + (("(" + request.class + ")") if  request.multiclass else "")
        return self.rollDice(request, rname, request["hit-dice"], {})

    def rollDeathSave(self, request, custom_roll_dice=""):
        return self.rollD20(request, "Death Saving Throw", {"custom_dice": custom_roll_dice})

    def rollItem(self, request, custom_roll_dice=""):
        source = request["item-type"].trim().toLowerCase()
        if source == "tool, common" and request.character.abilities.length > 0:
            proficiencies = {}
            proficiencies["None"] = 0
            proficiencies["Half Proficient"] = math.floor(request.character.proficiency / 2)
            proficiencies["Proficient"] = request.character.proficiency
            proficiencies["Expert"] = request.character.proficiency * 2
            formula = "1d20 + @ability + @proficiency + @custom_dice"
            html = '<form>'
            html += '<div class="beyond20-form-row"><label>Roll Formula</label><input type="text" value="' + formula + '" disabled></div>'
            html += '<div class="beyond20-form-row"><label>Select Ability</label><select name="ability">'
            modifiers = {}
            for ability in request.character.abilities:
                html += '<option value="' + ability[0] + '">' + ability[0] + '</option>'
                modifiers[ability[0]] = ability[3]
            html += "</select></div>"
            html += '<div class="beyond20-form-row"><label>Select Proficiency</label><select name="proficiency">'
            for prof in proficiencies:
                html += '<option value="' + prof + '">' + prof + '</option>'
            html += "</select></div>"
            html += '</form>'
            self._prompter.prompt("Using a tool", html, request.name).then(def(html):
                if html:
                    ability = html.find('[name="ability"]').val()
                    mod = modifiers[ability]
                    proficiency = html.find('[name="proficiency"]').val()
                    prof_value = proficiencies[proficiency]
                    data = {"ability": mod, "proficiency": prof_value, "custom_dice": custom_roll_dice}
                    self.rollD20(request, request.name + "(" + ability + ")", data)
            )
        return self.rollTrait(request)

    def rollTrait(self, request):
        if request["source-type"]?:
            source = request["source-type"]
            if request.source.length > 0:
                source += ": " + request.source
        elif request["item-type"]?:
            source = request["item-type"]
        else:
            source = request.type

        return self.postDescription(request, request.name, source, {}, request.description, open=True)

    def queryDamageType(self, title, damage_types):
        choices = {}
        for option in damage_types:
            value = damage_types[option]
            if value:
                choices[option] = option + " (" + value + ")"
            else:
                choices[option] = option
        return self.queryGeneric(title, "Choose Damage Type :", choices, "damage-type")

    def buildAttackRolls(self, request, custom_roll_dice):
        async_function = v'async'
        def ():
            to_hit = []
            damage_rolls = []
            is_critical = False
            if request["to-hit"]?:
                critical_limit = request["critical-limit"] ? 20

                custom = "" if custom_roll_dice == "" else (" + " + custom_roll_dice)
                to_hit_mod = " + " + request["to-hit"] + custom
                # for lint
                to_hit_mod
                to_hit = v'await self.getToHit(request, request.name, to_hit_mod)'
                is_critical = self.isCriticalHitD20(to_hit, critical_limit)


            if request.damages?:                
                damages = list(request.damages)
                damage_types = list(request["damage-types"])
                critical_damages = list(request["critical-damages"])
                critical_damage_types = list(request["critical-damage-types"])
                if request.name == "Chromatic Orb":
                    damage_choices = {}
                    critical_damage_choices = {}
                    for dmgtype in ["Acid", "Cold", "Fire", "Lightning", "Poison", "Thunder"]:
                        idx = damage_types.index(dmgtype)
                        damage_choices[damage_types.pypop(idx)] = damages.pypop(idx)
                        idx = critical_damage_types.index(dmgtype)
                        if idx >= 0:
                            critical_damage_choices[critical_damage_types.pypop(idx)] = critical_damages.pypop(idx)
                            
                    chromatic_type = v'await self.queryDamageType(request.name, damage_choices)'
                    damages.insert(0, damage_choices[chromatic_type])
                    damage_types.insert(0, chromatic_type)
                    if chromatic_type in critical_damage_choices:
                        crit_damage = critical_damage_choices[chromatic_type]
                        critical_damages.insert(0, crit_damage)
                        critical_damage_types.insert(0, chromatic_type)
                elif request.name == "Chaos Bolt":
                    for dmgtype in ["Acid", "Cold", "Fire", "Force", "Lightning", "Poison", "Psychic", "Thunder"]:
                        idx = damage_types.index(dmgtype)
                        base_damage = damages.pypop(idx)
                        damage_types.pypop(idx)
                        idx = critical_damage_types.index(dmgtype)
                        crit_damage = critical_damages.pypop(idx)
                        critical_damage_types.pypop(idx)
                    damages.insert(0, base_damage)
                    damage_types.insert(0, "Chaotic energy")
                    critical_damages.insert(0, crit_damage)
                    critical_damage_types.insert(0, "Chaotic energy")
                elif request.name == "Toll the Dead":
                    ttd_dice = v'await self.queryGeneric(request.name, "Is the target missing any of its hit points?", {"d12": "Yes", "d8": "No"}, "ttd_dice", ["d12", "d8"])'
                    damages[0] = damages[0].replace("d8", ttd_dice)
                elif damage_types.includes("Colossus Slayer"):
                    console.log("slayer")                    
                    cs_index = damage_types.indexOf("Colossus Slayer")
                    cs_dice = v'await self.queryGeneric(request.name, "Add Colossus Slayer damage?", {"0": "No", "d8": "Yes"}, "cs_dice", ["0", "d8"])'
                    if cs_dice != "d8":
                        damages.splice(cs_index, 1)
                        damage_types.splice(cs_index, 1)

                has_versatile = len(damage_types) > 1 and damage_types[1] == "Two-Handed"
                for i in range(damages.length):
                    roll = self._roller.roll(damages[i])
                    dmg_type = damage_types[i]
                    if dmg_type in ["Healing", "Disciple of Life", "Temp HP"]:
                        damage_flags = DAMAGE_FLAGS.HEALING
                    elif i == 0:
                        damage_flags = DAMAGE_FLAGS.REGULAR
                    elif i == 1 and has_versatile:
                        damage_flags = DAMAGE_FLAGS.VERSATILE
                    else:
                        damage_flags = DAMAGE_FLAGS.ADDITIONAL
                    suffix = " Damage" if not (damage_flags & DAMAGE_FLAGS.HEALING) else ""
                    damage_rolls.append((dmg_type + suffix, roll, damage_flags))
                    # Handle life transference
                    if request.name == "Life Transference" and dmg_type == "Necrotic":
                        damage_rolls.append(("Healing", roll, DAMAGE_FLAGS.HEALING))

                if request.name == "Chaos Bolt":
                    for i, dmg_roll in enumerate(damage_rolls):
                        dmg_type, roll, flags = dmg_roll
                        if dmg_type == "Chaotic energy Damage" and roll.dice[0].faces == 8:
                            chaos_bolt_damages = ["Acid", "Cold", "Fire", "Force", "Lightning", "Poison", "Psychic", "Thunder"]
                            damage_choices = {}
                            for r in roll.dice[0].rolls:
                                damage_choices[chaos_bolt_damages[r.roll - 1]] = None
                            console.log("Damage choices : ", damage_choices, damage_choices.length)
                            if Object.keys(damage_choices).length == 1:
                                damage_rolls.append(("Chaotic energy leaps from the target to a different creature of your choice within 30 feet of it", "", DAMAGE_FLAGS.MESSAGE))
                                chaotic_type = Object.keys(damage_choices)[0]
                            else:
                                chaotic_type = v'await self.queryDamageType(request.name, damage_choices)'
                            damage_rolls[i] = (chaotic_type + " Damage", roll, flags)
                            critical_damage_types[0] = chaotic_type
                            break

                if is_critical:
                    for i in range(critical_damages.length):
                        roll = self._roller.roll(critical_damages[i])
                        dmg_type = critical_damage_types[i]
                        if dmg_type in ["Healing", "Disciple of Life", "Temp HP"]:
                            damage_flags = DAMAGE_FLAGS.HEALING
                        elif i == 0:
                            damage_flags = DAMAGE_FLAGS.REGULAR
                        elif i == 1 and has_versatile:
                            damage_flags = DAMAGE_FLAGS.VERSATILE
                        else:
                            damage_flags = DAMAGE_FLAGS.ADDITIONAL
                        suffix = " Critical Damage" if not (damage_flags & DAMAGE_FLAGS.HEALING) else ""
                        damage_rolls.append((dmg_type + suffix, roll, damage_flags | DAMAGE_FLAGS.CRITICAL))

            return [to_hit, damage_rolls]
        return async_function()

    def rerollDamages(self, rolls):
        new_rolls = []
        for (roll_name, roll, flags) in rolls:
            if isinstance(roll, str) or isinstance(roll, list):
                new_rolls.append((roll_name, roll, flags))
            else:
                new_rolls.append((roll_name, roll.reroll(), flags))
        return new_rolls

    def rollAttack(self, request, custom_roll_dice=""):
        async_function = v'async'
        def ():
            [to_hit, damage_rolls] = v'await self.buildAttackRolls(request, custom_roll_dice)'

            data = {}
            if request.range?:
                data["Range"] = request.range

            roll_info = []
            if request["save-dc"]?:
                roll_info.append(("Save", request["save-ability"] + " DC " + request["save-dc"]))

            return self.postDescription(request, request.name, None, data, request.description? "", to_hit, roll_info, damage_rolls)
        return async_function()



    def buildSpellCard(self, request):
        data = {"Casting Time": request["casting-time"],
                "Range": request.range,
                "Duration": request.duration,
                "Components": request.components}

        if request["cast-at"]?:
            source = request["level-school"] + "(Cast at " + request["cast-at"] + " Level)"
        else:
            source = request["level-school"]
                                                        
        
        if request.ritual:
            data["Ritual"] = "Can be cast as a ritual"
        if request.concentration:
            data["Concentration"] = "Requires Concentration"
        description = request.description.replace("At Higher Levels.", "</br><b>At Higher levels.</b>")

        return (source, data, description)

    def rollSpellCard(self, request):
        spell_card = self.buildSpellCard(request)
        return self.postDescription(request, request.name, spell_card[0], spell_card[1], spell_card[2], open=True)

    def rollSpellAttack(self, request, custom_roll_dice):
        async_function = v'async'
        def ():
            spell_card = self.buildSpellCard(request)

            roll_info = []
            if request.range?:
                roll_info.append(("Range", request.range))

            if request["cast-at"]?:
                roll_info.append(("Cast at", request["cast-at"] + " Level"))
            components = request.components
            prefix = self._settings["component-prefix"] if self._settings["component-prefix"] != "" else None
            if self._settings["components-display"] == "all":
                if components != "":
                    roll_info.append((prefix or "Components", components))
            elif self._settings["components-display"] == "material":
                while components != "":
                    if components[0] in ["V", "S"]:
                        components = components[1:]
                        if components.startsWith(", "):
                            components = components[2:]
                    if components[0] == "M":
                        roll_info.append((prefix or "Materials", self._settings["component-prefix"] + components[2:-1]))
                        components = ""

            if request["save-dc"]?:
                roll_info.append(("Save", request["save-ability"] + " DC " + request["save-dc"]))

            [attack_rolls, damage_rolls] = v'await self.buildAttackRolls(request, custom_roll_dice)'

            return self.postDescription(request, request.name, spell_card[0], spell_card[1], spell_card[2], attack_rolls, roll_info, damage_rolls)
        return async_function()

    def handleRollRequest(self, request):
        custom_roll_dice = ""
        if request.character.type == "Character":
            custom_roll_dice = request.character.settings["custom-roll-dice"] ? ""

        if request.type == "skill":
            return self.rollSkill(request, custom_roll_dice)
        elif request.type == "ability":
            return self.rollAbility(request, custom_roll_dice)
        elif request.type == "saving-throw":
            return self.rollSavingThrow(request, custom_roll_dice)
        elif request.type == "initiative":
            return self.rollInitiative(request, custom_roll_dice)
        elif request.type == "hit-dice":
            return self.rollHitDice(request)
        elif request.type == "item":
            return self.rollItem(request, custom_roll_dice)
        elif request.type in ["feature", "trait", "action"]:
            return self.rollTrait(request)
        elif request.type == "death-save":
            return self.rollDeathSave(request, custom_roll_dice)
        elif request.type == "attack":
            return self.rollAttack(request, custom_roll_dice)
        elif request.type == "spell-card":
            return self.rollSpellCard(request)
        elif request.type == "spell-attack":
            return self.rollSpellAttack(request, custom_roll_dice)
        else:
            # 'custom' or anything unexpected
            mod = request.modifier if request.modifier? else request.roll
            rname = request.name if request.name? else request.type

            return self.rollDice(request, rname + "(" + mod + ")", mod, {})


class Beyond20BaseRoll:
    def __init__(self, formula, data={}):
        self._formula = formula
        self._data = data
        self._fail_limit = None
        self._critical_limit = None
        self._discarded = False
        self._total = 0

    @property
    def formula(self):
        return self._formula
    @property
    def total(self):
        raise Error("NotImplemented")
    @property
    def dice(self):
        raise Error("NotImplemented")
    @property
    def parts(self):
        raise Error("NotImplemented")

    def getTooltip(self):
        raise Error("NotImplemented")

    def reroll(self):
        raise Error("NotImplemented")

    def setDiscarded(self, discarded):
        self._discarded = discarded
    def isDiscarded(self):
        return self._discarded

    def setCriticalLimit(self, limit):
        self._critical_limit = limit
    def setFailLimit(self, limit):
        self._fail_limit = limit
    def checkRollForCrits(self, cb):
        for die in self.dice:
            for r in die.rolls:
                if not (r.discarded ? False):
                    if cb(die.faces, r.roll):
                        return True
        return False

    def isCriticalHit(self):
        return self.checkRollForCrits(def(faces, value):
            limit = faces if self._critical_limit is None else self._critical_limit
            return value >= limit
        )

    def isCriticalFail(self):
        return self.checkRollForCrits(def(faces, value):
            limit = 1 if self._fail_limit is None else self._fail_limit
            return value <= limit
        )
    def toJSON(self):
        return {
            "formula": self.formula,
            "parts": self.parts,
            "fail-limit": self._fail_limit,
            "critical-limit": self._critical_limit,
            "critical-failure": self.isCriticalFail(),
            "critical-success": self.isCriticalHit(),
            "discarded": self.isDiscarded(),
            "total": self.total
        }